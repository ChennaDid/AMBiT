Version information. The versions are tagged in CVS using the naming convention
  Atomic1_1_1
Changes sorted as follows
Bug: Bug fixes.
Opt: Optimisations.
Alt: Alterations for cosmetic/usage reasons or improved accuracy (not bugs).
Add: Added functionality.
Del: Removed functionality.
-------------------------------------------------------------------------------

Add: Options for Sigma3 in HamiltonianMatrix class. Zero thickness option for
     NuclearPotential in Core_BuildStates.cpp. Additional energy shift "delta"
     in denominator of MBPT diagrams.

1.3.0 - 11/10/05
Add: Sigma3Calculator class. The class inherits MBPTCalculator, but is separate
     since its functions include calculation of ang. momentum diagrams, and it
     has different syntax. Projection::GetNonRelConfiguration() and
     Projection::GetProjectionDifferences3() added. HamiltonianMatrix has a few
     functions added so that it can handle Sigma3. It also now has a set of
     leading configurations that it uses to select elements in which to include
     Sigma3, but these may be useful in the future anyway.
     Added Sigma3Calculator* sigma3 to Atom class.
Opt: Constant::Electron3j() now uses symmetry properties so that it only stores
     3j symbols that have m1 > 0.
Bug: ConfigGenerator::GenerateMultipleExcitations() can now deal with zero
     excitations (useful for one-configuration calculations).

1.2.4 - 04/10/05
Add: MBPTCalculator::GetTwoElectronBoxDiagrams() which calculates two-valence-
     electron MBPT diagrams 4, 5, and 6; Added INCLUDE_EXTRA_BOX_DIAGRAMS
     option to HamiltonianMatrix::CoulombMatrixElement() which includes radial
     integrals with "wrong" parity, if they exist in integrals;
     CIIntegralsMBPT::IncludeExtraBoxDiagrams() and 
     UpdateTwoElectronBoxDiagrams() add odd parity box diagrams to integrals.
     GetStorageSize() will now include these box diagrams in the total if
     include_extra_box is true. Temporary function
     CIIntegralsMBPT::AddSMSToTwoElectronIntegrals() will upgrade *.two.int
     files that have no SMS included in them.
Alt: CIIntegralsMBPT::TwoElectronIntegrals now include SMS with the radial
     integral, instead of adding them when required. This makes sure the SMS is
     not incorrectly added to box diagrams with wrong parity.
     CIIntegralsMBPT::ReadMultipleTwoElectronIntegrals() will not append a "_0"
     to the filename if only one file is requested (same with
     ReadMultipleOneElectronIntegrals).
Bug: Changes to Core::CalculateExcitedState() should improve HF excited states.

1.2.3 - 12/09/05
     This version is very stable; it was used for all C and Mg calculations.
Alt: Atom::DoOpenShell*() improved usage of Read/Write with MBPT; 
     Atom::OpenShellEnergy() simplified.
Add: Altered make.dependencies to only use DEPFLAG and not CXXFLAGS when doing
     makedep (so that we can use gcc for makedep and icpc for compiling).

1.2.2 - 27/06/05
Add: MBPTCalculator::CalculateTwoElectronSub() for two-electron subtraction
     diagrams.
Alt: Moved set of ValenceEnergies from CIIntegralsMBPT to MBPTCalculator.
     Atom::Read()/Write() separates core and excited states to different files;
     includes excited_mbpt. Changed lc compilation to use lapack/blas instead
     of intel-mkl.

1.2.1 - 21/06/05
Bug: CIIntegralsMBPT::ReadMultipleOneElectronIntegrals(); Added variable
     mbpt to Atom to fix scoping error in Atom::RunOpen(); SMS was wrong
     in CIIntegralsMBPT; Limits on an integral in 
     MBPT::CalculateTwoElectron2().
Opt: Vector resize eliminated from CIIntegrals::UpdateTwoElectronIntegrals;
     order of loops in CIIntegralsMBPT::UpdateTwoElectronIntegrals;
     method of swapping in CIIntegralsMBPT::TwoElectronIntegralOrdering().
     StateIntegrator::HamiltonianMatrixElement() checks core polarisation
     before calculating.
Alt: Core::Clear() overwritten to erase OpenShellStates also. Core::Read/Write
     modified to store OpenShellStates; StateManager::Read() modified to only
     replace existing states; changed compiler to intel on lc; removed
     printing to stdout in Davidson routine.
Add: Support for APAC AC in make.machine. This required small modifications to
     Atom, ConfigGenerator, and MPIHamiltonianMatrix because comm_world alias
     needs to be declared and initialised separately, or else be a reference to
     MPI::COMM_WORLD; CIIntegralsMBPT::Update() writes integrals every
     hour when doing MBPT; CIIntegrals::Clear() added; CIIntegrals identifier
     separated into potentially different read/write files. Added command
     "unpackbackend" to Makefile which keeps Atom/Atom.cpp and Atom_Open.cpp
     constant.

1.2.0 - 09/06/05
Add: Ability to have no "core" electrons (i.e. all electrons in open shell);
     can reduce number of integrals stored for CI using CIIntegrals class.
     Support for MBPT + CI using new CIIntegralsMBPT class, which also has MPI
     support; added Brillouin-Wigner perturbation theory to MBPTCalculator;
     improved calculation of SigmaPotential in MBPTCalculator and separated it
     from calculation of matrix elements. Added two-electron integrals and
     one-electron subtraction diagrams to MBPTCalculator.
     Added bool Core::IsOpenShellCore().
Opt: MBPTCalculator::GetSecondOrderSigma(); Constant::Wigner3j() to use
     static vectors; CoulombIntegrator::FastCoulombIntegrate() has alternative
     fast interface, as does SigmaPotential::AddToSigma().
Alt: Moved Coulomb and SMS integral storage from HamiltonianMatrix to new
     class CIIntegrals.
Bug: StateIntegrator::IsotopeShiftIntegral() limits of integration for
     potential and matrix element separated.

1.1.5 - 11/04/05
Bug: DiscreteState::CheckSize() remove numerical wobbles at tail;
     Core::UpdateExcitedState() checks if state is in open shells first;
     removed lucky zero in HamiltonianMatrix::GetSz(); removed lucky zero
     from Core::IterateDiscreteStateGreens():exchange potential.
     ExcitedStates::Orthogonalise() orthogonalise to states with smaller
     pqn only (this is needed when all states are updated).
     Core::CalculateVolumeShiftPotential() was wrong.
Opt: MBPTCalculator::CalculateCorrelation* uses Constant::Electron3j();
     RStates and CustomBasis update using previous HF states instead of
     just rebuilding from scratch.
Alt: Maximum iterations of Davidson method changed from 2000 -> 20000;
     added size in atomic units to Debug::LogHFIterations output.

1.1.4 - 08/03/05
Alt: New method of converging Hartree-Fock by damping changes in electron
     states at each iteration. Big changes to Core::Update() and
     Core::CalculateExcitedState().
Bug: HamiltonianMatrix::~HamiltonianMatrix(): check to see if M is NULL
     before deletion; State::NumZeroes now removes start and tail to exclude
     small oscillations about zero.
Add: Support for jcb2pc in make.machine.
Del: Convergence method based on tail matching, except for local exchange
     approximation. Thus CalculateDiscreteState->ConvergeStateApproximation.
Del: UpdateHFPotentialNoSelfInteraction() and
     CalculateExchangeNoSelfInteraction() are no longer required.

1.1.3 - 22/02/05
Bug: FeII configuration; sign in GetSMSIntegral().
Alt: Atom.h and Atom/OpenShellEnergy(); call to DSPEVX in Davidson changed
     to improve accuracy.
Opt: MPIMatrix modified for better load distribution and moved to 
     Configuration; SMS in HamiltonianMatrix (which introduced the bug that
     needed fixing).
Add: CorePolarisability and Core::GetRadius(); Matrix::GetDiagonal();
     versions.txt (this file).

1.1.2
Opt: GenerateProjections for MPI.
Bug: GetEigenvalue wasn't providing space for MPI::Reduce().

1.1.1
Del: HFExcitedStates.
Bug: BSplineGrid::CreateSplineKnots().

1.1
Opt: Many.
Add: Compilations options for linux cluster; parallel support using MPI;
     link to f77 directly (no more f2c).
Alt: I/O; interface functions in Atom; DebugOptions altered, made global;
     Merged RelativisticInfo, SingleParticleInfo with StateInfo.
Bug: Memory leak in Core::CalculateDiscreteState().

1.1.1.1
non-parallel, Win32 + Unix, HF + CI + MBPT (single particle only)
